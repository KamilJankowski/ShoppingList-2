/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Shopping;

import static Shopping.ShoppingList.sLstLidl;
import static Shopping.ShoppingList.sLstTesco;
import static Shopping.ShoppingList.sLstPolish;
import static Shopping.ShoppingList.lm2;
import static Shopping.ShoppingList.lm3;
import static Shopping.ShoppingList.lm4;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import javax.swing.JFileChooser;
import java.io.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;

/**
 *
 * @author KamilJankowski
 */
public class SaveAsHTML extends javax.swing.JDialog {

    String htmlParts;
    public static File fs;
    ManageProductGroups mProdGroup = new ManageProductGroups();
    //ShoppingList shopping = new ShoppingList();

    /**
     * Creates new form SaveAsPDF
     */
    public SaveAsHTML() {

        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);

        jFileChooser1.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooser1.setApproveButtonToolTipText("");
        jFileChooser1.setCurrentDirectory(new java.io.File("C:\\share"));
        jFileChooser1.setDialogTitle("");
        jFileChooser1.setSelectedFile(new java.io.File("C:\\share\\list.html"));
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        getFileNametoAttach(fs);
        try {
            DBConnection dbcon = new DBConnection();

            if ((fs != null)) {

                BufferedWriter out = new BufferedWriter(new FileWriter(fs));
                //ShoppingList shopping = new ShoppingList();

                String fLstLidl = ShoppingList.sLstLidl;
                String fLstTesco = ShoppingList.sLstTesco;
                String fLstPolish = ShoppingList.sLstPolish;
//                if ((fLstPolish == null) && (fLstLidl == null) && (fLstTesco == null)) {
//                    new EmptyLists().setVisible(true);
//
//                }
                String html = "<!DOCTYPE html><html><head><title>Shopping list</title><style> table{border-collapse: collapse;} th, td{width:2em;text-align:center;} .checkbox{width:20%;} th{background:#56ffb6;} tr:hover{background:#f2f2f2;} </style></head><body><h1>Shopping list</h1>";
                out.write(html);

                if (fLstLidl == null) {
                    System.out.println("List is empty.");

                } else {
                    fLstLidl = fLstLidl.substring((fLstLidl.indexOf('[')) + 1, fLstLidl.indexOf(']'));
                    String[] parts = fLstLidl.split(", ");

                    if ((parts.length > 0)) {
                        String sql = "insert into tesco_list (tesco_list_date) values (CURDATE())";
                        mProdGroup.executeSQLQuery(sql);
                        html = "<h3>Lidl</h3><table><tr><th class=\"checkbox\">Check</th><th>Product</th><th>Group</th></tr>";
                        out.write(html);

                        for (String p : parts) {
                            String elmTag = p;
                            try {
                                sql = "SELECT  product_group_name FROM products Inner join product_groups on products.product_group_id = product_groups.product_group_id where product_name='" + elmTag + "'";
                                Statement ps = dbcon.connect().createStatement();
                                ResultSet rs = ps.executeQuery(sql);
                                while (rs.next()) {
                                    String productGroupsName = rs.getString("product_group_name");

                                    // html = "<div > <input type=\"checkbox\" width=\"50px\" ><p width=\"150px\">" + elmTag + "</p></div><div>" + productGroupsName + "</div>";
                                    html = "<tr><td class=\"checkbox\"><input type=\"checkbox\"  ></td><td>" + elmTag + "</td><td>" + productGroupsName + "</td></tr>";
                                    sql = "insert into products_has_tesco_list (products_product_id, products_product_group_id, tesco_list_tesco_list_id) values ((select product_id from products where product_name='" + elmTag + "'), (select product_group_id from products where product_name='" + elmTag + "'), (select max(tesco_list_id) from tesco_list where tesco_list_date=curdate()))";
                                    mProdGroup.executeSQLQuery(sql);
                                }
                            } catch (SQLException ex) {
                                // new ProductEntryError(this, rootPaneCheckingEnabled).setVisible(true);
                            }

                            out.write(html);

                        }
                        html = "</table>";
                        out.write(html);
                        lm2.removeAllElements();
                    }
                }

                if (fLstTesco == null) {
                    System.out.println("List is empty.");

                } else {
                    fLstTesco = fLstTesco.substring((fLstTesco.indexOf('[')) + 1, fLstTesco.indexOf(']'));
                    String[] parts = fLstTesco.split(", ");

                    if ((parts.length > 0)) {
                        String sql = "insert into tesco_list (tesco_list_date) values (CURDATE())";
                        mProdGroup.executeSQLQuery(sql);

                        html = "<h3>Tesco</h3><table><tr><th class=\"checkbox\">Check</th><th>Product</th><th>Group</th></tr>";
                        out.write(html);

                        for (String p : parts) {
                            String elmTag = p;
                            try {
                                sql = "SELECT  product_group_name FROM products Inner join product_groups on products.product_group_id = product_groups.product_group_id where product_name='" + elmTag + "'";
                                Statement ps = dbcon.connect().createStatement();
                                ResultSet rs = ps.executeQuery(sql);
                                while (rs.next()) {
                                    String productGroupsName = rs.getString("product_group_name");

                                    // html = "<div > <input type=\"checkbox\" width=\"50px\" ><p width=\"150px\">" + elmTag + "</p></div><div>" + productGroupsName + "</div>";
                                    html = "<tr><td class=\"checkbox\"><input type=\"checkbox\"  ></td><td>" + elmTag + "</td><td>" + productGroupsName + "</td></tr>";
                                    sql = "insert into products_has_tesco_list (products_product_id, products_product_group_id, tesco_list_tesco_list_id) values ((select product_id from products where product_name='" + elmTag + "'), (select product_group_id from products where product_name='" + elmTag + "'), (select max(tesco_list_id) from tesco_list where tesco_list_date=curdate()))";
                                    mProdGroup.executeSQLQuery(sql);
                                }
                            } catch (SQLException ex) {
                                // new ProductEntryError(this, rootPaneCheckingEnabled).setVisible(true);
                            }

                            out.write(html);
                        }
                        html = "</table>";
                        out.write(html);
                        lm3.removeAllElements();
                    }
                }

                if (fLstPolish == null) {
                    System.out.println("List is empty.");

                } else {
                    fLstPolish = fLstPolish.substring((fLstPolish.indexOf('[')) + 1, fLstPolish.indexOf(']'));
                    String[] parts = fLstPolish.split(", ");

                    if ((parts.length > 0)) {
                        String sql = "insert into tesco_list (tesco_list_date) values (CURDATE())";
                        mProdGroup.executeSQLQuery(sql);
                        html = "<h3>Polish shop</h3><table><tr><th class=\"checkbox\">Check</th><th>Product</th><th>Group</th></tr>";
                        out.write(html);

                        for (String p : parts) {
                            String elmTag = p;
                            try {
                                sql = "SELECT  product_group_name FROM products Inner join product_groups on products.product_group_id = product_groups.product_group_id where product_name='" + elmTag + "'";
                                Statement ps = dbcon.connect().createStatement();
                                ResultSet rs = ps.executeQuery(sql);
                                while (rs.next()) {
                                    String productGroupsName = rs.getString("product_group_name");

                                    // html = "<div > <input type=\"checkbox\" width=\"50px\" ><p width=\"150px\">" + elmTag + "</p></div><div>" + productGroupsName + "</div>";
                                    html = "<tr><td class=\"checkbox\"><input type=\"checkbox\"  ></td><td>" + elmTag + "</td><td>" + productGroupsName + "</td></tr>";
                                    sql = "insert into products_has_tesco_list (products_product_id, products_product_group_id, tesco_list_tesco_list_id) values ((select product_id from products where product_name='" + elmTag + "'), (select product_group_id from products where product_name='" + elmTag + "'), (select max(tesco_list_id) from tesco_list where tesco_list_date=curdate()))";
                                    mProdGroup.executeSQLQuery(sql);
                                }
                            } catch (SQLException ex) {
                                // new ProductEntryError(this, rootPaneCheckingEnabled).setVisible(true);
                            }

                            out.write(html);
                        }
                        html = "</table>";
                        out.write(html);
                        lm4.removeAllElements();
                    }
                }
                //Replace with the string 
                //out.newLine();
                //you are trying to write 
                html = "</body></html>";
                out.write(html);
                out.close();
                setVisible(false);
                dispose();

                //zrobic aby zapisywalo pusta liste
            } else {
                setVisible(false);
                dispose();
            }
        } catch (IOException e) {
            System.out.println(e);

//            setVisible(false);
//            dispose();
    }//GEN-LAST:event_jFileChooser1ActionPerformed

//    public void saveHtml(String elmTag) {
//        ShoppingList shopping = new ShoppingList();
//        String fLst = shopping.sLstLidl;
//        String[] parts = fLst.split(",");
//        for (String p : parts) {
//            elmTag = p;
//            htmlParts = elmTag;
//            System.out.println(htmlParts);
//
//        }
    }

    public void getFileNametoAttach(File gFs) {
        gFs = jFileChooser1.getSelectedFile();
        fs = gFs;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SaveAsHTML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SaveAsHTML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SaveAsHTML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SaveAsHTML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                SaveAsHTML dialog = new SaveAsHTML();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables
}
